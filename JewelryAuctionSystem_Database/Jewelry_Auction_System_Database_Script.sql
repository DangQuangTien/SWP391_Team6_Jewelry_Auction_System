CREATE DATABASE JewelryAuctionSystem
USE JewelryAuctionSystem
GO
CREATE SEQUENCE USERIDSEQUENCE
START WITH 0
INCREMENT BY 1;
GO
CREATE TABLE USERS (
	USERID VARCHAR(50) NOT NULL PRIMARY KEY,
	USERNAME VARCHAR(50) UNIQUE,
	FIRSTNAME NVARCHAR(50),
	LASTNAME NVARCHAR(50),
	PHONENUMBER VARCHAR(20),
	EMAIL VARCHAR(255) NOT NULL,
	GENDER NVARCHAR(10),
	DOB DATE,
	JOINEDDATE DATE,
	AVATAR VARCHAR(255),
	[PASSWORD] VARCHAR(255) NOT NULL,
	IS_ADMIN BIT DEFAULT 0
)
GO
CREATE TRIGGER CHECKUNIQUEUSERNAME
ON USERS
INSTEAD OF INSERT
AS
BEGIN
    IF EXISTS (SELECT 1 FROM USERS INNER JOIN INSERTED ON USERS.USERNAME = INSERTED.USERNAME)
    BEGIN
        RAISERROR ('USERNAME ALREADY EXISTS.', 16, 1);
        ROLLBACK TRANSACTION;
    END
    ELSE
    BEGIN
        DECLARE @NEWUSERID NVARCHAR(50);
        SET @NEWUSERID = 'U' + CAST(NEXT VALUE FOR USERIDSEQUENCE AS NVARCHAR(50));
        
        INSERT INTO USERS (USERID, USERNAME, FIRSTNAME,LASTNAME, EMAIL, PHONENUMBER, GENDER, DOB,JOINEDDATE, AVATAR, [PASSWORD], IS_ADMIN)
        SELECT @NEWUSERID, USERNAME, FIRSTNAME,LASTNAME, EMAIL, PHONENUMBER, GENDER, DOB, GETDATE(), AVATAR, [PASSWORD],IS_ADMIN
        FROM INSERTED;
    END
END;

INSERT INTO USERS (USERNAME, FIRSTNAME, LASTNAME, EMAIL, PHONENUMBER, GENDER, DOB, AVATAR, [PASSWORD], IS_ADMIN) VALUES (
'ADMIN', N'ADMIN', N'ADMIN', 'ADMIN123@GMAIL.COM', NULL, 'MALE', '1999-01-09', NULL,'123', 1)
INSERT INTO USERS (USERNAME, FIRSTNAME, LASTNAME, EMAIL, PHONENUMBER, GENDER, DOB, AVATAR, [PASSWORD]) VALUES (
'USER', N'USER', N'USER', 'USER123@GMAIL.COM', NULL, 'MALE', '1999-01-09', NULL,'123')
SELECT * FROM USERS WHERE USERNAME = N'ADMIN' AND PASSWORD = N'123'
SELECT * FROM USERS WHERE USERNAME = 'USER'
GO
CREATE SEQUENCE VALUATIONIDSEQUENCE
START WITH 0
INCREMENT BY 1;
GO
CREATE TABLE VALUATION (
	VALUATIONID VARCHAR(50) NOT NULL PRIMARY KEY,
	[NAME] NVARCHAR(255) NOT NULL, 
	EMAIL NVARCHAR(255) NOT NULL,
	PHONENUMBER VARCHAR(20) NOT NULL,
	COMMUNICATION VARCHAR(100),
	[DESCRIPTION] NVARCHAR(MAX),
	PHOTOS VARCHAR(255),
	USERID VARCHAR(50),
	CONSTRAINT FR_USERID FOREIGN KEY (USERID) REFERENCES USERS(USERID),
	STATUS BIT DEFAULT 0
)
GO
CREATE TRIGGER AUTOGENERATEVALUATIONID ON VALUATION INSTEAD OF INSERT
AS 
BEGIN
	DECLARE @NEWVALUATIONID NVARCHAR(50);
	SET  @NEWVALUATIONID = 'VAL' + CAST(NEXT VALUE FOR VALUATIONIDSEQUENCE AS NVARCHAR(50));
	INSERT INTO VALUATION (VALUATIONID, [NAME], EMAIL, PHONENUMBER, COMMUNICATION, [DESCRIPTION], PHOTOS, USERID)
    SELECT @NEWVALUATIONID, [NAME], EMAIL, PHONENUMBER, COMMUNICATION, [DESCRIPTION], PHOTOS, USERID
    FROM INSERTED;
END;
CREATE TABLE [ADDRESS](
	ADDRESSID VARCHAR(50) NOT NULL PRIMARY KEY,
	STREET NVARCHAR(255) NOT NULL,
	CITY NVARCHAR(255) NOT NULL,
	[STATE] NVARCHAR(255) NOT NULL,
	ZIPCODE VARCHAR(50) NOT NULL,
	COUNTRY NVARCHAR(255) NOT NULL,
	USERID VARCHAR(50) NOT NULL,
	CONSTRAINT FK_USERID FOREIGN KEY (USERID) REFERENCES USERS(USERID)
) 
CREATE SEQUENCE ADDRESSIDSEQUENCE
START WITH 0
INCREMENT BY 1;
GO
CREATE TRIGGER AUTOGENERATEADDRESSID ON [ADDRESS] INSTEAD OF INSERT
AS 
BEGIN
	DECLARE @NEWADDRESSID NVARCHAR(50);
	SET  @NEWADDRESSID = 'ADD' + CAST(NEXT VALUE FOR ADDRESSIDSEQUENCE AS NVARCHAR(50));
	INSERT INTO [ADDRESS] (ADDRESSID, STREET, CITY, [STATE], ZIPCODE, COUNTRY, USERID)
    SELECT @NEWADDRESSID, STREET, CITY, [STATE], ZIPCODE, COUNTRY, USERID
    FROM INSERTED;
END;
GO
CREATE SEQUENCE CATEGORYIDSEQUENCE
START WITH 0
INCREMENT BY 1;
GO
CREATE TABLE CATEGORY (
    CATEGORYID NVARCHAR(50) NOT NULL PRIMARY KEY,
    CATEGORYNAME NVARCHAR(255) NOT NULL,
    PARENTID NVARCHAR(50),
    [ACTIVE] BIT DEFAULT 1,
    FOREIGN KEY (PARENTID) REFERENCES CATEGORY(CATEGORYID)
);
GO
CREATE TRIGGER AUTOGENERATECATEGORYID ON CATEGORY INSTEAD OF INSERT
AS 
BEGIN
	DECLARE @NEWCATEGORYID NVARCHAR(50);
	SET   @NEWCATEGORYID = 'Category' + CAST(NEXT VALUE FOR CATEGORYIDSEQUENCE AS NVARCHAR(50));
	INSERT INTO CATEGORY (CATEGORYID, CATEGORYNAME)
    SELECT @NEWCATEGORYID, CATEGORYNAME
    FROM INSERTED;
END;
GO
CREATE SEQUENCE MATERIALIDSEQUENCE
START WITH 0
INCREMENT BY 1;
CREATE TABLE MATERIAL (
    MATERIALID NVARCHAR(50) NOT NULL PRIMARY KEY,
    MATERIALNAME NVARCHAR(500) NOT NULL
);
GO
CREATE TRIGGER AUTOGENERATEMATERIALID ON MATERIAL INSTEAD OF INSERT
AS 
BEGIN
	DECLARE @NEWMATERIALID NVARCHAR(50);
	SET   @NEWMATERIALID = 'M' + CAST(NEXT VALUE FOR MATERIALIDSEQUENCE AS NVARCHAR(50));
	INSERT INTO MATERIAL (MATERIALID, MATERIALNAME)
    SELECT @NEWMATERIALID, MATERIALNAME
    FROM INSERTED;
END;
GO
CREATE SEQUENCE PRODUCTIDSEQUENCE
START WITH 0
INCREMENT BY 1;
CREATE SEQUENCE PRODUCTCODESEQUENCE
START WITH 1
INCREMENT BY 1;
GO
CREATE TABLE PRODUCT (
	PRODUCTID NVARCHAR(50) NOT NULL PRIMARY KEY,
	PRODUCTCODE NVARCHAR(50) NOT NULL,
	PRODUCTNAME NVARCHAR(255) NOT NULL,
	CATEGORYID NVARCHAR(50) NOT NULL,
	MATERIALCOST DECIMAL(18,2),
	GEMCOST DECIMAL(18,2),
	BRAND NVARCHAR(255),
	SIZE NVARCHAR(100),
	HIGHESTBID DECIMAL(18,2),
	WINNERID VARCHAR(50),
	USERID VARCHAR(50),
	CONSTRAINT FK_PRODUCT_USERID FOREIGN KEY (USERID) REFERENCES USERS(USERID),
	CONSTRAINT FK_CATEGORYID FOREIGN KEY (CATEGORYID) REFERENCES CATEGORY(CATEGORYID)
)
GO
CREATE TRIGGER trg_AutoIncrementProductIDAndCode
ON PRODUCT
INSTEAD OF INSERT
AS
BEGIN
    DECLARE @NextProductID NVARCHAR(50);
    DECLARE @NextProductCode NVARCHAR(50);
    
    SELECT @NextProductID = NEXT VALUE FOR PRODUCTIDSEQUENCE;
    SELECT @NextProductCode = NEXT VALUE FOR PRODUCTCODESEQUENCE;

    INSERT INTO PRODUCT (PRODUCTID, PRODUCTCODE, PRODUCTNAME, CATEGORYID, MATERIALCOST, GEMCOST, BRAND, SIZE, HIGHESTBID, WINNERID, USERID)
    SELECT 
        @NextProductID,
        RIGHT('000000' + CAST(@NextProductCode AS NVARCHAR(50)), 6), 
        PRODUCTNAME,
        CATEGORYID,
        MATERIALCOST,
        GEMCOST,
        BRAND,
        SIZE,
        HIGHESTBID,
        WINNERID,
        USERID
    FROM inserted;
END;
GO
CREATE TABLE ProductMaterial (
    MaterialID NVARCHAR(50),
    ProductID NVARCHAR(50),
    [Weight] FLOAT,
    PRIMARY KEY (MaterialID, ProductID),
    FOREIGN KEY (MaterialID) REFERENCES Material(MaterialID),
    FOREIGN KEY (ProductID) REFERENCES Product(PRODUCTID)
);
CREATE TABLE Gem (
    GemID NVARCHAR(50) NOT NULL PRIMARY KEY,
    GemCode NVARCHAR(50) NOT NULL,
    GemName NVARCHAR(255) NOT NULL,
    TypeGem NVARCHAR(255),
    Shape NVARCHAR(100),
    Cut NVARCHAR(100),
    Carat_Weight FLOAT,
    Color NVARCHAR(50),
    Clarity NVARCHAR(100),
    Dimension NVARCHAR(100),
    Origin NVARCHAR(255),
    Condition NVARCHAR(255)
);

CREATE TABLE ProductGem (
	ProductID NVARCHAR(50),
	GemID NVARCHAR(50),
	PRIMARY KEY (GemID, ProductID),
	FOREIGN KEY (GemID) REFERENCES Gem(GemID),
	FOREIGN KEY (ProductID) REFERENCES Product(ProductID)
)

CREATE TABLE Auction (
    AuctionID NVARCHAR(50) NOT NULL PRIMARY KEY,
    ProductID NVARCHAR(50) NOT NULL,
    BidAmount DECIMAL(18,2) NOT NULL,
    StartDate DATE NOT NULL,
    StartTime TIME NOT NULL,
    EndTime TIME NOT NULL,
    CurrentWinnerID VARCHAR(50),
    Status NVARCHAR(50),
    CurrentBid DECIMAL(18,2),
    CONSTRAINT FK_Auction_Product FOREIGN KEY (ProductID) REFERENCES Product(PRODUCTID),
    CONSTRAINT FK_Auction_CurrentWinner FOREIGN KEY (CurrentWinnerID) REFERENCES Users(UserID)
);

CREATE TABLE PreAuctionValuation (
    ValuationID NVARCHAR(50) NOT NULL PRIMARY KEY,
    ProductID NVARCHAR(50) NOT NULL,
    EstimatedValue DECIMAL(18,2),
    ValuationDate DATE NOT NULL,
    Valuator NVARCHAR(255),
    Notes NVARCHAR(1000),
    FOREIGN KEY (ProductID) REFERENCES Product(PRODUCTID)
);






